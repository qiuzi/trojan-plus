stages:

- stage: Build
  jobs:

  - job: Linux
    pool:
      vmImage: ubuntu-latest
    container:
      image: trojanplusgroup/centos-build:latest
    steps:
    - checkout: self
      submodules: true
    - script: |
        set -euo pipefail
        cmake -DMYSQL_INCLUDE_DIR=/usr/local/include/mariadb -DMYSQL_LIBRARY=/usr/local/lib/mariadb/libmysqlclient.a -DDEFAULT_CONFIG=config.json -DFORCE_TCP_FASTOPEN=ON -DBoost_USE_STATIC_LIBS=ON .
        make -j$(nproc)
        strip -s trojan
    - publish: $(System.DefaultWorkingDirectory)/trojan
      artifact: LinuxBinary

  - job: macOS
    pool:
      vmImage: macOS-latest
    steps:
    - checkout: self
      submodules: true
    - script: |
        set -euo pipefail
        brew install boost openssl@1.1
        cmake -DBoost_USE_STATIC_LIBS=ON -DOPENSSL_INCLUDE_DIR=/usr/local/opt/openssl@1.1/include -DOPENSSL_CRYPTO_LIBRARY=/usr/local/opt/openssl@1.1/lib/libcrypto.a -DOPENSSL_SSL_LIBRARY=/usr/local/opt/openssl@1.1/lib/libssl.a -DDEFAULT_CONFIG=config.json -DENABLE_MYSQL=OFF -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 .
        make -j$(nproc)
        strip -SXTx trojan
    - publish: $(System.DefaultWorkingDirectory)/trojan
      artifact: macOSBinary

  - job: Windows
    pool:
      vmImage: windows-latest
    steps:
    - checkout: self
      submodules: true
    - bash: |
        set -euo pipefail
        curl -LO https://slproweb.com/download/Win64OpenSSL-1_1_1g.exe
        powershell ".\\Win64OpenSSL-1_1_1g.exe /silent /sp- /suppressmsgboxes /DIR='C:\\Program Files\\OpenSSL-Win64'"
        cmake -DBoost_INCLUDE_DIR="${BOOST_ROOT_1_72_0}/include" -DBoost_USE_STATIC_LIBS=ON -DOPENSSL_ROOT_DIR='C:/Program Files/OpenSSL-Win64' -DOPENSSL_USE_STATIC_LIBS=ON -DENABLE_MYSQL=OFF .
        cmake --build . --config Release
    - publish: $(System.DefaultWorkingDirectory)/Release/trojan.exe
      artifact: WindowsBinary

- stage: Test
  jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest
    container:
      image: trojanplusgroup/trojan-test:latest
      options: --privileged
    steps:
    - download: current
      artifact: LinuxBinary
    - script: |
        set -euo pipefail
        set -v

        BINARY="$PIPELINE_WORKSPACE/LinuxBinary/trojan"
        chmod +x "$BINARY"

        cd tests/LinuxFullTest/
        sudo /usr/local/bin/python3.8 fulltest_main.py $BINARY -g -d 5333

        ifconfig
        route -n

        default_gw=`route -n | grep "0\.0\.0\.0.*UG" | awk '{print $2}'`

        sudo ip tuntap add dev tun0 mode tun user root
        sudo ifconfig tun0 10.0.0.1 netmask 255.255.255.0
        sudo ip link set dev tun0 up mtu 1500 txqueuelen 1000
        sudo route add default gw 10.0.0.2 metric 0
        sudo route add 114.114.114.114 gw $default_gw metric 0
        sudo route add 8.8.8.8 gw $default_gw metric 0

        ifconfig
        route -n
        
        sudo /usr/local/bin/python3.8 fulltest_main.py $BINARY -t -n -d 5333
      env:
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)

  - job: Windows
    pool:
      vmImage: windows-latest
    steps:
    - download: current
      artifact: WindowsBinary
    - bash: |
        set -euo pipefail
        BINARY="$PIPELINE_WORKSPACE/WindowsBinary/trojan.exe"
        py -3 -m pip install PySocks psutil dnspython
        cd tests/LinuxFullTest/
        py -3 fulltest_main.py $BINARY -g -n -d 5333
      env:
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)

  - job: macOS
    pool:
      vmImage: macOS-latest
    steps:
    - download: current
      artifact: macOSBinary
    - script: |
        set -euo pipefail
        BINARY="$PIPELINE_WORKSPACE/macOSBinary/trojan"
        chmod +x "$BINARY"
        cd tests/LinuxFullTest/
        PYTHON=/usr/local/opt/python@3.8/bin/python3.8
        if [ ! -f $PYTHON ]; then
          brew install python@3.8
        fi
        $PYTHON -m pip install PySocks psutil dnspython
        $PYTHON fulltest_main.py $BINARY -g -n -d 5333
      env:
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)

- stage: Package
  jobs:

  - job: Linux
    pool:
      vmImage: ubuntu-latest
    steps:
    - download: current
      artifact: LinuxBinary
    - script: |
        set -euo pipefail
        BINARY="$PIPELINE_WORKSPACE/LinuxBinary/trojan"
        chmod +x "$BINARY"
        mkdir trojan
        cp "$BINARY" trojan/trojan
        cp -r examples LICENSE README.md trojan
        cp examples/server.json-example trojan/config.json
        tar cf trojan-linux-amd64.tar trojan
        xz trojan-linux-amd64.tar
      env:
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)
    - publish: $(System.DefaultWorkingDirectory)/trojan-linux-amd64.tar.xz
      artifact: LinuxRelease

  - job: macOS
    pool:
      vmImage: macOS-latest
    steps:
    - download: current
      artifact: macOSBinary
    - script: |
        set -euo pipefail
        BINARY="$PIPELINE_WORKSPACE/macOSBinary/trojan"
        chmod +x "$BINARY"
        mkdir trojan
        cp "$BINARY" trojan/trojan
        cp -r examples LICENSE README.md trojan
        cp examples/client.json-example trojan/config.json
        rm trojan/examples/nat.json-example trojan/examples/trojan.service-example
        cat > trojan/start.command <<EOF
        #!/bin/sh

        cd "\$(dirname "\$0")"
        ./trojan
        EOF
        chmod +x trojan/start.command
        zip -r9 trojan-macos.zip trojan
      env:
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)
    - publish: $(System.DefaultWorkingDirectory)/trojan-macos.zip
      artifact: macOSRelease

  - job: Windows
    pool:
      vmImage: windows-latest
    steps:
    - download: current
      artifact: WindowsBinary
    - bash: |
        set -euo pipefail
        BINARY="$PIPELINE_WORKSPACE/WindowsBinary/trojan.exe"
        mkdir trojan
        cp "$BINARY" trojan/trojan.exe
        cp -r examples LICENSE README.md trojan
        cp examples/client.json-example trojan/config.json
        rm trojan/examples/nat.json-example trojan/examples/trojan.service-example
        7z a -mx=9 trojan-win.zip trojan
      env:
        PIPELINE_WORKSPACE: $(Pipeline.Workspace)
    - publish: $(System.DefaultWorkingDirectory)/trojan-win.zip
      artifact: WindowsRelease
